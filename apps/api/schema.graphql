type Call implements Node {
  callerCity: String
  callerCountry: String
  callerName: String
  callerState: String
  callerZip: String
  duration: Int
  endDate: DateTime
  episode: Episode
  events(
    after: ID
    before: ID
    first: Int
    last: Int
    oldestFirst: Boolean
  ): CallEventsConnection!
  id: ID!
  identifier: Int!
  phoneNumber: String!
  startDate: DateTime!
  status: CallStatus!
}

type CallEvent implements Node {
  date: DateTime!
  download: EpisodeDownload
  id: ID!
  part: EpisodePart
  type: CallEventType!
}

enum CallEventType {
  ANSWERED
  ENDED
  ENDING_EPISODE
  EPISODE_ERROR
  EPISODE_READY
  FETCHING_EPISODE
  INTRODUCING_EPISODE
  NO_EPISODE
  PLAYING_EPISODE
  WAITING_MESSAGE
}

type CallEventsConnection {
  edges: [CallEventsConnectionEdge]!
  pageInfo: PageInfo!
}

type CallEventsConnectionEdge {
  cursor: String!
  node: CallEvent!
}

enum CallStatus {
  ENDED
  IN_PROGRESS
  UNKNOWN
}

type CallUpdatedNewEventsConnection {
  edges: [CallUpdatedNewEventsConnectionEdge!]!
}

type CallUpdatedNewEventsConnectionEdge {
  cursor: String!
  node: CallEvent!
}

type CallUpdatedSubscription {
  call: Call!
  newEvents: CallUpdatedNewEventsConnection!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Episode implements Node {
  callCount: Int!
  contentURL: URL!
  description: String
  downloads(
    after: ID
    before: ID
    excludeDeleted: Boolean
    first: Int
    last: Int
    oldestFirst: Boolean
    onlyFinished: Boolean
  ): EpisodeDownloadsConnection!
  guid: String!
  id: ID!
  identifier: Int!
  imageURL: URL
  podcast: Podcast!
  publishDate: DateTime!
  title: String!
}

type EpisodeDownload implements Node {
  callCount: Int!
  calls(
    after: ID
    before: ID
    first: Int
    last: Int
  ): EpisodeDownloadCallsConnection!
  contentURL: URL!
  deleted: Boolean!
  downloadDate: DateTime!
  downloadFinishDate: DateTime
  episode: Episode!
  finished: Boolean!
  id: ID!
  partCount: Int!
  parts(
    after: ID
    before: ID
    first: Int
    last: Int
  ): EpisodeDownloadPartsConnection!
}

type EpisodeDownloadCallsConnection {
  edges: [EpisodeDownloadCallsConnectionEdge]!
  pageInfo: PageInfo!
}

type EpisodeDownloadCallsConnectionEdge {
  cursor: String!
  node: Call!
}

type EpisodeDownloadPartsConnection {
  edges: [EpisodeDownloadPartsConnectionEdge]!
  pageInfo: PageInfo!
}

type EpisodeDownloadPartsConnectionEdge {
  cursor: String!
  node: EpisodePart!
}

type EpisodeDownloadsConnection {
  edges: [EpisodeDownloadsConnectionEdge]!
  pageInfo: PageInfo!
}

type EpisodeDownloadsConnectionEdge {
  cursor: String!
  node: EpisodeDownload!
}

type EpisodePart implements Node {
  download: EpisodeDownload!
  duration: Float!
  id: ID!
  number: Int!
  size: Int!
  url: URL!
}

type EpisodeUpdatedSubscription {
  episode: Episode!
}

type NewCallsConnection {
  edges: [NewCallsConnectionEdge!]!
}

type NewCallsConnectionEdge {
  cursor: String!
  node: Call!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Podcast implements Node {
  callCount: Int!
  description: String
  episodes(
    after: ID
    before: ID
    first: Int
    last: Int
    oldestFirst: Boolean
  ): PodcastEpisodesConnection!
  feedURL: URL!
  id: ID!
  identifier: Int!
  imageURL: URL
  lastFetchDate: DateTime
  title: String!
}

type PodcastEpisodesConnection {
  edges: [PodcastEpisodesConnectionEdge]!
  pageInfo: PageInfo!
}

type PodcastEpisodesConnectionEdge {
  cursor: String!
  node: Episode!
}

type Query {
  call(identifier: Int!): Call
  calls(
    after: ID
    before: ID
    episodeIdentifier: Int
    first: Int
    last: Int
    onlyComplete: Boolean
    onlyInProgress: Boolean
  ): QueryCallsConnection!
  episode(identifier: Int!): Episode
  episodes(
    after: ID
    before: ID
    first: Int
    last: Int
  ): QueryEpisodesConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  ok: Boolean!
  podcast(identifier: Int!): Podcast
  podcasts(
    after: ID
    before: ID
    first: Int
    last: Int
  ): QueryPodcastsConnection!
}

type QueryCallsConnection {
  edges: [QueryCallsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryCallsConnectionEdge {
  cursor: String!
  node: Call!
}

type QueryEpisodesConnection {
  edges: [QueryEpisodesConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryEpisodesConnectionEdge {
  cursor: String!
  node: Episode!
}

type QueryPodcastsConnection {
  edges: [QueryPodcastsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPodcastsConnectionEdge {
  cursor: String!
  node: Podcast!
}

type Subscription {
  callUpdated(callIdentifier: Int!): CallUpdatedSubscription!
  episodeUpdated(episodeIdentifier: Int!): EpisodeUpdatedSubscription!
  newCalls(episodeIdentifier: Int): NewCallsConnection!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL
