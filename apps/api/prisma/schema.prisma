// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Podcast {
  id              Int       @id @default(autoincrement())
  title           String
  feedURL         String
  imageURL        String?
  description     String?
  lastFetchDate   DateTime?
  episodes        Episode[]

  @@unique([title, id])
}

model Episode {
  id            Int       @id @default(autoincrement())
  podcastId     Int
  podcast       Podcast   @relation(fields: [podcastId], references: [id])
  guid          String
  title         String
  contentURL    String
  publishDate   DateTime
  imageURL      String?
  description   String?
  downloads     EpisodeDownload[]

  @@unique([podcastId, guid])
  @@unique([publishDate, id])
}

model EpisodeDownload {
  id                  Int       @id @default(autoincrement())
  episodeId           Int
  episode             Episode   @relation(fields: [episodeId], references: [id])
  contentURL          String
  downloadDate        DateTime
  downloadFinishDate  DateTime?
  finished            Boolean   @default(false)
  deleted             Boolean   @default(false)
  parts               EpisodePart[]

  callEvents    CallEvent[]

  @@unique([downloadDate, id])
}

model EpisodePart {
  id          Int               @id @default(autoincrement())
  downloadId  Int
  download    EpisodeDownload   @relation(fields: [downloadId], references: [id])
  sortOrder   Int
  key         String
  url         String
  size        Int
  duration    Float

  callEvents  CallEvent[]

  @@unique([sortOrder, downloadId])
}

model Call {
  id              Int       @id @default(autoincrement())
  twilioCallSid   String    @unique

  startDate       DateTime
  endDate         DateTime?

  phoneNumber     String
  callerName      String?
  callerCity      String?
  callerState     String?
  callerZip       String?
  callerCountry   String?
  callDuration    Int?

  events          CallEvent[]

  @@unique([startDate, id])
}

model CallEvent {
  id          Int               @id @default(autoincrement())
  callId      Int
  call        Call              @relation(fields: [callId], references: [id])
  date        DateTime
  type        CallEventType
  downloadId  Int?
  download    EpisodeDownload?  @relation(fields: [downloadId], references: [id])
  partId      Int?
  part        EpisodePart?      @relation(fields: [partId], references: [id])
  rawRequest  Json?

  @@unique([date, id])
}

enum CallEventType {
  ANSWERED
  FETCHING_EPISODE
  EPISODE_READY
  NO_EPISODE
  EPISODE_ERROR
  WAITING_MESSAGE
  INTRODUCING_EPISODE
  PLAYING_EPISODE
  ENDING_EPISODE
  ENDED
}

model PostalCodeLocation {
  id         Int      @id @default(autoincrement())
  postalCode String
  country    String
  latitude   Float
  longitude  Float
  fetchDate  DateTime

  @@unique([postalCode, country])
}
